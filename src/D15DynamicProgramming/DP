
Dynamic Programming (DP) is a method for solving complex problems
 by breaking them down into simpler subproblems. It is applicable
  when the problem can be divided into overlapping subproblems
   that can be solved independently. DP is used to optimize
    recursive algorithms by storing the results of subproblems
     to avoid redundant computations, thus improving efficiency.
      There are two main approaches to DP: Memoization (Top-Down)
       and Tabulation (Bottom-Up).
Ways of DP

1. Memoization (Top Down)
-> recursion -> subproblems -> storage -> reuse


2.Tabulation (Bottom Up)
->initializing -> meaning -> filling small to large


Fibonacci
// Fibonacci using Memoization (Top-Down)
public static int fibMemo(int n, int[] memo) {
    if (n <= 1) return n;
    if (memo[n] != 0) return memo[n];
    memo[n] = fibMemo(n-1, memo) + fibMemo(n-2, memo);
    return memo[n];
}

// Fibonacci using Tabulation (Bottom-Up)
public static int fibTab(int n) {
    if (n <= 1) return n;
    int[] dp = new int[n+1];
    dp[0] = 0;
    dp[1] = 1;
    for (int i = 2; i <= n; i++) {
        dp[i] = dp[i-1] + dp[i-2];
    }
    return dp[n];
}


0-1 Knapsack
The Knapsack problem is a classic optimization problem in computer science and mathematics. It involves selecting items from a set, each with a weight and value, to maximize the total value while staying within a weight limit. There are three main types:

1. Fractional Knapsack: Items can be broken into fractions (solved using greedy approach).
2. Knapsack: Each item can be chosen only once (0 or 1 times).
3. Unbounded Knapsack: Items can be chosen multiple times.

The problem is often solved using dynamic programming techniques, particularly for the 0-1 and unbounded variants.
fractional knapsack(greedy) , 0-1 , unbounded


Unbounded Knapsack


LCS(Longest common Subsequence
Kadanes Algorithm(arrays)
Catalan Number
DP on Grid (2D array)